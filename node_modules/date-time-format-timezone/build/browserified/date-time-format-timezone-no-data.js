(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = dataloader;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function getHistoryFromTriplet(indices, triplet) {
    return {
        until: parseInt(indices.timeStamps[parseInt(triplet[0], 32)], 32) * 1000,

        offset: indices.offsets[parseInt(triplet[1], 32)],

        isdst: !!parseInt(triplet[2], 10)
    };
}

function reduceToTriplets(array) {
    var result = [];
    var i = 0;

    while (i < array.length) {
        result.push([array[i], array[i + 1], array[i + 2]]);
        i += 3;
    }

    return result;
}

function unpackHistory(indices, historyStringCSV) {
    var encodedIndexList = historyStringCSV.split(',');
    var count = encodedIndexList.length;

    if (count % 3 !== 0) {
        throw new Error('wrong length of history Array, must be multiple of 3');
    }

    var history = reduceToTriplets(encodedIndexList).map(function (triplet) {
        return getHistoryFromTriplet(indices, triplet);
    });

    if (count / 3 !== history.length) {
        throw new Error('failed to harvest all data!!');
    }

    return history;
}

function enrichMetaZoneMapWithEquivalentZones(equivalentIanaTimeZones) {
    var globalSpace = this.globalSpace;

    if (!(globalSpace && globalSpace.Intl._metaZoneData)) {
        return;
    }

    var metaZoneData = globalSpace.Intl._metaZoneData;
    var foundMetaZone = null;

    equivalentIanaTimeZones.forEach(function (ianaTimeZone) {
        if (metaZoneData.get(ianaTimeZone)) {
            foundMetaZone = metaZoneData.get(ianaTimeZone);
        }
    });

    if (!foundMetaZone) {
        return;
    }

    var allMetaZoneData = metaZoneData.get();
    equivalentIanaTimeZones.forEach(function (ianaTimeZone) {
        if (!metaZoneData.get(ianaTimeZone)) {
            allMetaZoneData[ianaTimeZone] = foundMetaZone;
        }
    });
}

function loadTimeZoneData(packedTzData) {
    var _this = this;

    if (!packedTzData || !Array.isArray(packedTzData.zoneDefs) || !Array.isArray(packedTzData.timeStamps) || !Array.isArray(packedTzData.offsets)) {
        throw new Error('loadTimeZoneData: rejected packedTzData, packedTzData is not in right shape.');
    }

    var indices = {
        timeStamps: packedTzData.timeStamps,
        offsets: packedTzData.offsets
    };

    packedTzData.zoneDefs.forEach(function (zoneDef) {
        var zoneDefSplit = zoneDef.split('||');
        var equivalentIanaTimeZones = zoneDefSplit[0].split(',');
        var historyString = zoneDefSplit[1];
        var ianaTimeZoneHistoryList = unpackHistory(indices, historyString);

        equivalentIanaTimeZones.forEach(function (ianaTimeZone) {
            _this.value[ianaTimeZone] = ianaTimeZoneHistoryList;
        });

        _this.enrichMetaZoneMapWithEquivalentZones(equivalentIanaTimeZones);
    });
}

function getCLDRZoneNamesFromQuadruplet(zoneNameIndex, strQuadruplet) {
    var quadruplet = strQuadruplet.split('|');
    var lookupIndex = function lookupIndex(w) {
        return zoneNameIndex[parseInt(w, 32)];
    };

    return {
        long: {
            standard: quadruplet[0].split(',').filter(function (w) {
                return !!w;
            }).map(lookupIndex).join(''),
            daylight: quadruplet[1].split(',').filter(function (w) {
                return !!w;
            }).map(lookupIndex).join('')
        },
        short: {
            standard: quadruplet[2].split(',').filter(function (w) {
                return !!w;
            }).map(lookupIndex).join(''),
            daylight: quadruplet[3].split(',').filter(function (w) {
                return !!w;
            }).map(lookupIndex).join('')
        }
    };
}

function loadLocaleData(packedCLDRZoneData) {
    var _this2 = this;

    if (!packedCLDRZoneData || !packedCLDRZoneData.locales || !Array.isArray(packedCLDRZoneData.zoneNameIndex)) {
        throw new Error('loadLocaleData: rejected data, data is not in right shape.');
    }

    var decodeQuadruplet = function decodeQuadruplet(strQuadruplet) {
        return getCLDRZoneNamesFromQuadruplet(packedCLDRZoneData.zoneNameIndex, strQuadruplet);
    };

    Object.keys(packedCLDRZoneData.locales).forEach(function (locale) {
        var metaZones = packedCLDRZoneData.locales[locale].metazone;
        Object.keys(metaZones).forEach(function (metaZone) {
            metaZones[metaZone] = decodeQuadruplet(metaZones[metaZone]);
        });

        var ianaTimeZones = packedCLDRZoneData.locales[locale].zone;
        Object.keys(ianaTimeZones).forEach(function (ianaTimeZone) {
            ianaTimeZones[ianaTimeZone] = decodeQuadruplet(ianaTimeZones[ianaTimeZone]);
        });

        _this2.value[locale] = packedCLDRZoneData.locales[locale];
    });

    Object.keys(packedCLDRZoneData.locales).forEach(function (locale) {
        var localeItems = locale.split('-');

        for (var i = 0; i < localeItems.length - 1; i++) {
            var generalLocale = localeItems.slice(0, localeItems.length - i - 1).join('-');

            if (!_this2.value[generalLocale]) {
                _this2.value[generalLocale] = _this2.value[locale];
            }
        }
    });
}

function getLocale(locale) {
    if (this.get(locale)) {
        return this.get(locale);
    }

    var localeItems = locale.split('-');
    var fallbackLocales = [];

    for (var i = 0; i < localeItems.length - 1; i++) {
        fallbackLocales.push(localeItems.slice(0, localeItems.length - i - 1).join('-'));
    }

    for (var j = 0; j < fallbackLocales.length; j++) {
        if (this.get(fallbackLocales[j])) {
            return this.get(fallbackLocales[j]);
        }
    }

    return undefined;
}

var Loader = function Loader(loaderFunction, extraMethods) {
    var _this3 = this;

    _classCallCheck(this, Loader);

    this.value = {};
    this.load = loaderFunction || function (json) {
        this.value = json;
    };

    if (extraMethods) {
        Object.keys(extraMethods).forEach(function (name) {
            return _this3[name] = extraMethods[name];
        });
    }

    this.get = function (key) {
        if (key === undefined) {
            return this.value;
        }

        return this.value[key];
    };
};

function dataloader(globalSpace) {
    if (globalSpace.Intl) {
        globalSpace.Intl._metaZoneData = new Loader();
        globalSpace.Intl._localeData = new Loader(loadLocaleData, {
            getLocale: getLocale
        });
        globalSpace.Intl._timeZoneData = new Loader(loadTimeZoneData, {
            enrichMetaZoneMapWithEquivalentZones: enrichMetaZoneMapWithEquivalentZones.bind({
                globalSpace: globalSpace
            })
        });
    }
}


},{}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

function getGenericZoneName(offset, isShort, locale) {
    var offsetSign = offset < 0 ? '-' : '+',
        hourVal = Math.floor(Math.abs(offset / 60)),
        minuteVal = Math.abs(offset % 60);

    var hour = Intl.NumberFormat(locale, {
        minimumIntegerDigits: isShort ? 1 : 2
    }).format(hourVal);

    var minute = Intl.NumberFormat(locale, {
        minimumIntegerDigits: 2
    }).format(minuteVal);

    if (offset === 0) {
        return '';
    }

    if (isShort && minuteVal === 0) {
        minute = '';
    }

    return offsetSign + hour + (minute ? ':' : '') + minute;
}

function getRelevantMetaZone(metaNameData, timeStamp, offsetString) {
    if (!Array.isArray(metaNameData)) {
        return null;
    }

    if (metaNameData.length === 1) {
        return metaNameData[0].mzone;
    }

    var minTs = Math.pow(2, 31) * -1000;
    var maxTs = Math.pow(2, 31) * 1000;

    var mzone = null;

    metaNameData.forEach(function (metaName) {
        var fromVal = metaName.from ? new Date(metaName.from + offsetString).getTime() : minTs;
        var toVal = metaName.to ? new Date(metaName.to + offsetString).getTime() : maxTs;

        if (fromVal <= timeStamp && timeStamp <= toVal) {
            mzone = metaName.mzone;
        }
    });

    return mzone;
}

function pickZoneName(isShort, isdst, cldrZoneNames) {
    if (!isShort && cldrZoneNames.long) {
        if (isdst && cldrZoneNames.long.daylight) {
            return cldrZoneNames.long.daylight;
        } else if (!isdst && cldrZoneNames.long.standard) {
            return cldrZoneNames.long.standard;
        }
    } else if (cldrZoneNames.short) {
        if (isdst && cldrZoneNames.short.daylight) {
            return cldrZoneNames.short.daylight;
        } else if (!isdst && cldrZoneNames.short.standard) {
            return cldrZoneNames.short.standard;
        }
    }

    return false;
}

function getTimeZoneOffsetInfo(timeZoneHistory, date) {
    var ts = date.getTime();
    var offsetHist = timeZoneHistory.reduce(function (find, hist) {
        return hist.until >= ts && find === null ? hist : find;
    }, null);

    return offsetHist ? offsetHist : timeZoneHistory[timeZoneHistory.length - 1];
}

function getZoneNameForLocale(_ref) {
    var locale = _ref.locale,
        ianaTimeZone = _ref.ianaTimeZone,
        offset = _ref.offset,
        isdst = _ref.isdst,
        isShort = _ref.isShort,
        timeStamp = _ref.timeStamp;

    var metaZoneName = getRelevantMetaZone(Intl._metaZoneData.get(ianaTimeZone), timeStamp, getGenericZoneName(offset));
    var cldrZones = Intl._localeData.getLocale(locale);
    var cldrZoneNamesThruMetaZone = metaZoneName && cldrZones && cldrZones.metazone[metaZoneName];
    var cldrZoneNamesThruIanaTimeZone = cldrZones && cldrZones.zone && cldrZones.zone[ianaTimeZone];

    if (cldrZoneNamesThruIanaTimeZone && pickZoneName(isShort, isdst, cldrZoneNamesThruIanaTimeZone)) {
        return pickZoneName(isShort, isdst, cldrZoneNamesThruIanaTimeZone);
    } else if (cldrZoneNamesThruMetaZone && pickZoneName(isShort, isdst, cldrZoneNamesThruMetaZone)) {
        return pickZoneName(isShort, isdst, cldrZoneNamesThruMetaZone);
    } else if (cldrZones && cldrZones.gmtFormat && offset) {
        cldrZones.gmtFormat.replace('{0}', getGenericZoneName(offset, isShort, locale));
    } else if (cldrZones && cldrZones.gmtZeroFormat && !offset) {
        return cldrZones.gmtZeroFormat;
    }

    return offset && ['GMT', getGenericZoneName(offset, isShort, locale)].join('') || 'GMT';
}

var buildCachedCheckTimeZoneSupport = function buildCachedCheckTimeZoneSupport(globalScope) {
    var hasSupport = {};

    return function (ianaTimeZone) {
        if (hasSupport[ianaTimeZone] !== undefined) {
            return hasSupport[ianaTimeZone];
        }

        try {
            new globalScope.Intl._DateTimeFormat('en', {
                timeZone: ianaTimeZone
            });
            hasSupport[ianaTimeZone] = true;
        } catch (exp) {
            hasSupport[ianaTimeZone] = false;
        }

        return hasSupport[ianaTimeZone];
    };
};

exports.buildCachedCheckTimeZoneSupport = buildCachedCheckTimeZoneSupport;
exports.getTimeZoneOffsetInfo = getTimeZoneOffsetInfo;
exports.getZoneNameForLocale = getZoneNameForLocale;


},{}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.default = polyfill;

var _lookupUtill = require("./lookup-utill.js");

function _get(object, property, receiver) {
    if (object === null) object = Function.prototype;
    var desc = Object.getOwnPropertyDescriptor(object, property);
    if (desc === undefined) {
        var parent = Object.getPrototypeOf(object);
        if (parent === null) {
            return undefined;
        }
        return _get(parent, property, receiver);
    }
    if ("value" in desc) {
        return desc.value;
    }
    var getter = desc.get;
    if (getter === undefined) {
        return undefined;
    }
    return getter.call(receiver);
}

function _getPrototypeOf(Class) {
    return Object.getPrototypeOf ? Object.getPrototypeOf(Class) : Class.__proto__;
}

function _setPrototypeOf(subClass, superClass) {
    if (Object.setPrototypeOf) {
        return Object.setPrototypeOf(subClass, superClass);
    }
    subClass.__proto__ = superClass;
    return subClass;
}

function _isNativeFunction(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
}

function _wrapNativeSuper(Class) {
    if (!_isNativeFunction(Class)) {
        return Class;
    }
    function Wrapper() {
        var prototypeConstructor = _getPrototypeOf(this).constructor;
        var args = [null];
        args.push.apply(args, arguments);
        var Constructor = Function.bind.apply(Class, args);
        var instance = new Constructor();
        if (prototypeConstructor) {
            _setPrototypeOf(instance, prototypeConstructor.prototype);
        }
        return instance;
    }
    Wrapper.prototype = Object.create(Class.prototype, {
        constructor: {
            value: Wrapper,
            enumerable: false,
            writable: true,
            configurable: true
        }
    });
    return _setPrototypeOf(Wrapper, Class);
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
        }
    });
    if (superClass) {
        _setPrototypeOf(subClass, superClass);
    }
}

function polyfill(globalSpace) {
    if (!(globalSpace.Intl && globalSpace.Intl.DateTimeFormat && !globalSpace.Intl._DateTimeFormatTimeZone)) {
        return;
    }

    var gIntl = globalSpace.Intl;
    var gDate = globalSpace.Date;
    var checkTimeZoneSupport = (0, _lookupUtill.buildCachedCheckTimeZoneSupport)(globalSpace);
    var jsonClone = function jsonClone(o) {
        return JSON.parse(JSON.stringify(o));
    };
    var _DateTimeFormat = _wrapNativeSuper(gIntl.DateTimeFormat);

    gIntl._DateTimeFormat = _DateTimeFormat;

    gIntl._DateTimeFormatTimeZone = {
        checkTimeZoneSupport: checkTimeZoneSupport
    };

    function DateTimeFormatPolyfill(locale, options) {
        if (!(this instanceof DateTimeFormatPolyfill)) {
            return new DateTimeFormatPolyfill(locale, options);
        }

        var _this = void 0;

        var timeZone = options && options.timeZone || 'UTC';

        if (options === undefined) {
            _this = _DateTimeFormat.call(this, locale, options);

            if (_this.formatToParts) {
                _this._nativeObject = new _DateTimeFormat(locale, options);
            }

            return _this;
        }

        if (checkTimeZoneSupport(timeZone)) {
            _this = _DateTimeFormat.call(this, locale, options);

            if (_this.formatToParts) {
                _this._nativeObject = new _DateTimeFormat(locale, options);
            }

            return _this;
        }

        var timeZoneData = gIntl._timeZoneData.get(timeZone);

        if (!timeZoneData) {
            throw new RangeError("invalid time zone in DateTimeFormat():  " + timeZone);
        }

        var tsOption = jsonClone(options);
        tsOption.timeZone = 'UTC';
        _this = _DateTimeFormat.call(this, locale, tsOption);

        var _resolvedOptions = _get(_getPrototypeOf(DateTimeFormatPolyfill.prototype), 'resolvedOptions', _this);

        var resolvedLocale = _resolvedOptions.call(_this).locale;

        if (options.timeZoneName !== undefined) {
            if (!(gIntl._localeData.getLocale(resolvedLocale) && Intl._metaZoneData.get(timeZone))) {
                throw new RangeError("unsupported value \"" + options.timeZoneName + "\" for timeZone " + timeZone + ". requires locale data for " + resolvedLocale);
            }
        }

        _this._dateTimeFormatPolyfill = {
            optionTimeZone: timeZone,
            optionTimeZoneName: options.timeZoneName,
            timeZoneData: timeZoneData
        };

        return _this;
    }
    _inherits(DateTimeFormatPolyfill, _DateTimeFormat);

    Object.defineProperty(DateTimeFormatPolyfill.prototype, 'format', {
        configurable: true,
        value: function value(date) {
            var _format = _get(_getPrototypeOf(DateTimeFormatPolyfill.prototype), 'format', this);
            var _resolvedOptions = _get(_getPrototypeOf(DateTimeFormatPolyfill.prototype), 'resolvedOptions', this);

            if (!this._dateTimeFormatPolyfill) {
                return _format.call(this, date);
            }

            if (date === null || date === undefined) {
                date = new Date();
            }

            if (!(date instanceof Date)) {
                date = new Date(date);
            }

            var polyfill = this._dateTimeFormatPolyfill;
            var timeZoneOffsetInfo = (0, _lookupUtill.getTimeZoneOffsetInfo)(polyfill.timeZoneData, date);
            var timeZoneOffset = timeZoneOffsetInfo.offset * 60000;
            var shiftedDate = new Date(date.getTime() + timeZoneOffset);
            var shiftedFormat = _format.call(this, shiftedDate);
            var resolvedLocale = _resolvedOptions.call(this).locale;
            var doNeedToReplaceTimeZoneName = polyfill.optionTimeZoneName !== undefined;

            if (doNeedToReplaceTimeZoneName) {
                var isShort = polyfill.optionTimeZoneName === 'short';
                var timeZoneName = (0, _lookupUtill.getZoneNameForLocale)({
                    locale: resolvedLocale,
                    ianaTimeZone: polyfill.optionTimeZone,
                    isdst: timeZoneOffsetInfo.isdst,
                    offset: timeZoneOffsetInfo.offset,
                    timeStamp: date.getTime(),
                    isShort: isShort
                });
                var timeZoneNameUTC = (0, _lookupUtill.getZoneNameForLocale)({
                    locale: resolvedLocale,
                    ianaTimeZone: 'UTC',
                    isdst: false,
                    offset: 0,
                    timeStamp: date.getTime(),
                    isShort: isShort
                });

                if (shiftedFormat.indexOf(timeZoneNameUTC) < 0) {
                    return shiftedFormat.trim() + ' ' + timeZoneName;
                }

                return shiftedFormat.replace(timeZoneNameUTC, timeZoneName);
            }

            return shiftedFormat;
        }
    });

    var _formatToParts = _get(_getPrototypeOf(DateTimeFormatPolyfill.prototype), 'formatToParts', this);

    if (_formatToParts) {
        Object.defineProperty(DateTimeFormatPolyfill.prototype, 'formatToParts', {
            configurable: true,
            value: function value(date) {
                var _resolvedOptions = _get(_getPrototypeOf(DateTimeFormatPolyfill.prototype), 'resolvedOptions', this);

                if (!this._dateTimeFormatPolyfill && this._nativeObject) {
                    return this._nativeObject.formatToParts(date);
                }

                if (date === null || date === undefined) {
                    date = new Date();
                }

                if (!(date instanceof Date)) {
                    date = new Date(date);
                }

                var polyfill = this._dateTimeFormatPolyfill;
                var timeZoneOffsetInfo = (0, _lookupUtill.getTimeZoneOffsetInfo)(polyfill.timeZoneData, date);
                var timeZoneOffset = timeZoneOffsetInfo.offset * 60000;
                var shiftedDate = new Date(date.getTime() + timeZoneOffset);
                var shiftedParts = _formatToParts.call(this, shiftedDate);
                var resolvedLocale = _resolvedOptions.call(this).locale;
                var doNeedToReplaceTimeZoneName = polyfill.optionTimeZoneName !== undefined;

                if (doNeedToReplaceTimeZoneName) {
                    var isShort = polyfill.optionTimeZoneName === 'short';
                    var timeZoneName = (0, _lookupUtill.getZoneNameForLocale)({
                        locale: resolvedLocale,
                        ianaTimeZone: polyfill.optionTimeZone,
                        isdst: timeZoneOffsetInfo.isdst,
                        offset: timeZoneOffsetInfo.offset,
                        timeStamp: date.getTime(),
                        isShort: isShort
                    });

                    var index = shiftedParts.map(function (i) {
                        return i.type;
                    }).indexOf('timeZoneName');

                    if (index >= 0) {
                        shiftedParts[index] = {
                            type: 'timeZoneName',
                            value: timeZoneName
                        };
                    }
                }

                return shiftedParts;
            }
        });
    }

    Object.defineProperty(DateTimeFormatPolyfill.prototype, 'resolvedOptions', {
        writable: true,
        configurable: true,
        value: function value() {
            var _resolvedOptions = _get(_getPrototypeOf(DateTimeFormatPolyfill.prototype), 'resolvedOptions', this);

            if (this._dateTimeFormatPolyfill) {
                var options = jsonClone(_resolvedOptions.call(this));
                options.timeZone = this._dateTimeFormatPolyfill.optionTimeZone;

                return options;
            }

            return _resolvedOptions.call(this);
        }
    });

    gIntl.DateTimeFormat = DateTimeFormatPolyfill;

    gDate.prototype.toLocaleString = function (locale, options) {
        var defaultLocaleOption = {
            day: 'numeric',
            month: 'numeric',
            year: 'numeric',
            hour: 'numeric',
            minute: 'numeric',
            second: 'numeric'
        };

        if (options === undefined) {
            options = jsonClone(defaultLocaleOption);
        }

        if (options.day === undefined && options.month === undefined && options.year === undefined && options.hour === undefined && options.minute === undefined && options.second === undefined) {
            options = jsonClone(options);
            options.day = defaultLocaleOption.day;
            options.month = defaultLocaleOption.month;
            options.year = defaultLocaleOption.year;
            options.hour = defaultLocaleOption.hour;
            options.minute = defaultLocaleOption.minute;
            options.second = defaultLocaleOption.second;
        }

        return new gIntl.DateTimeFormat(locale, options).format(this);
    };

    gDate.prototype.toLocaleDateString = function (locale, options) {
        var defaultDateOption = {
            day: 'numeric',
            month: 'numeric',
            year: 'numeric'
        };

        if (options === undefined) {
            options = jsonClone(defaultDateOption);
        }

        if (options.day === undefined && options.month === undefined && options.year === undefined) {
            options = jsonClone(options);
            options.day = defaultDateOption.day;
            options.month = defaultDateOption.month;
            options.year = defaultDateOption.year;
        }

        return new gIntl.DateTimeFormat(locale, options).format(this);
    };

    gDate.prototype.toLocaleTimeString = function (locale, options) {
        var defaultTimeOption = {
            hour: 'numeric',
            minute: 'numeric',
            second: 'numeric'
        };

        if (options === undefined) {
            options = jsonClone(defaultTimeOption);
        }

        if (options.hour === undefined && options.minute === undefined && options.second === undefined) {
            options = jsonClone(options);
            options.hour = defaultTimeOption.hour;
            options.minute = defaultTimeOption.minute;
            options.second = defaultTimeOption.second;
        }

        return new gIntl.DateTimeFormat(locale, options).format(this);
    };
}


},{"./lookup-utill.js":2}],4:[function(require,module,exports){
(function (global){
/*
 * Copyright 2017, Yahoo Inc.
 * Copyrights licensed under the New BSD License.
 * See the accompanying LICENSE file for terms.
 */
var myGlobal = (typeof global !== "undefined" && {}.toString.call(global) === '[object global]') ? global : window;
(require('./code/polyfill.js').default)(myGlobal);
(require('./code/data-loader.js').default)(myGlobal);
module.exports = myGlobal.Intl.DateTimeFormat;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./code/data-loader.js":1,"./code/polyfill.js":3}]},{},[4]);
